<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="manifest" href="0001_manifest.json">
        <title>キャッシュ削除</title>
    </head>
    <body>
        <div style="background-color:#ccf; padding:10px; margin:10px">log</div>
    </body>
    <script>
        追記 = (() => {
            var elemモデル = document.body.removeChild(document.getElementsByTagName('div')[0])
            var main = str => {
                var elem = elemモデル.cloneNode(true)
                document.body.insertBefore(elem, null)
                elem.innerText = str
            }
            return main
        })()
        
        onload = () => {
            追記('最終更新 ' + document.lastModified)
            追記('キャッシュ名の一覧\r\n　' + キャッシュ.getList().join('\r\n　'))
        }
        
        キャッシュ = (() => {
            return {
                getList : () => {
                    var arr = []
                    caches.keys().then(keys => Promise.all(
                        keys.map(key => arr.push(key) )
                    ))
                    return arr
                }
            }
        })()
        
        ServiceWorkerコントローラ = (()={
            // ServiceWorkerをサポートしていないブラウザなら何も返さずに終了
            if('serviceWorker' in navigator){}else{return}
            追記('serviceWorker in navigator')
            
            var レジスター = (()=>{
                var prom0 // promise
                var swr // ServiceWorkerRegistration
                return {
                    SWファイルのURLを指定 : URL => {
                        // URLの例「./sw.js」 -> スコープは「./」以下に限定される。それより上位のディレクトリにスコープを設定する事は仕様上不可能。
                        prom0 = navigator.serviceWorker.register(URL)
                    },
                    インストールを実行 : ()=> {
                        prom0.then(
                            registration => { 追記('サービスワーカー登録成功:', swr = registration) },
                            error        => { 追記('サービスワーカー登録失敗:', error) }
                        )
                    },
                    SWの状態監視を開始 : () => {
                        swr.addEventListener('updatefound', ()=>{
                            // SWファイルの「インストール or 更新」を開始するとこのイベントが発生する。
                            追記('サービスワーカーのインストール中')
                        })
                        swr.addEventListener('statechange', ()=>{
                            // swr.installing.onstatechangeじゃないとダメかも？
                            
                        }
                    }
                }
            })()
            
            return {
                インストール : URL => 
            }
        })()
    </script>
</html>
